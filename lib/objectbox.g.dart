// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/models/db/service_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2232946709823975729),
      name: 'ServiceModel',
      lastPropertyId: const obx_int.IdUid(9, 4650816624349814019),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5697191125079621273),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2007773999446513874),
            name: 'identifier',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 2247597361772265214)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7598209173886372798),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7952654821914771908),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 189811552589409647),
            name: 'language',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3381830095227425485),
            name: 'emails',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1827302918713399343),
            name: 'mainContact',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6447628205320828040),
            name: 'iconData',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4650816624349814019),
            name: 'otherContacts',
            type: 26,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 2232946709823975729),
      lastIndexId: const obx_int.IdUid(1, 2247597361772265214),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ServiceModel: obx_int.EntityDefinition<ServiceModel>(
        model: _entities[0],
        toOneRelations: (ServiceModel object) => [],
        toManyRelations: (ServiceModel object) => {},
        getId: (ServiceModel object) => object.id,
        setId: (ServiceModel object, int id) {
          object.id = id;
        },
        objectToFB: (ServiceModel object, fb.Builder fbb) {
          final identifierOffset = fbb.writeString(object.identifier);
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          final languageOffset = fbb.writeString(object.language);
          final emailsOffset = fbb.writeList(
              object.emails.map(fbb.writeString).toList(growable: false));
          final iconDataOffset = object.iconData == null
              ? null
              : fbb.writeListInt8(object.iconData!);
          final otherContactsOffset = fbb.writeListInt32(object.otherContacts);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identifierOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addOffset(4, languageOffset);
          fbb.addOffset(5, emailsOffset);
          fbb.addInt64(6, object.mainContact);
          fbb.addOffset(7, iconDataOffset);
          fbb.addOffset(8, otherContactsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final identifierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final emailsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 14, []);
          final mainContactParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final otherContactsParam =
              const fb.ListReader<int>(fb.Int32Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 20, []);
          final languageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final iconDataParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 18) as Uint8List?;
          final object = ServiceModel(
              id: idParam,
              identifier: identifierParam,
              name: nameParam,
              type: typeParam,
              emails: emailsParam,
              mainContact: mainContactParam,
              otherContacts: otherContactsParam,
              language: languageParam,
              iconData: iconDataParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ServiceModel] entity fields to define ObjectBox queries.
class ServiceModel_ {
  /// See [ServiceModel.id].
  static final id =
      obx.QueryIntegerProperty<ServiceModel>(_entities[0].properties[0]);

  /// See [ServiceModel.identifier].
  static final identifier =
      obx.QueryStringProperty<ServiceModel>(_entities[0].properties[1]);

  /// See [ServiceModel.name].
  static final name =
      obx.QueryStringProperty<ServiceModel>(_entities[0].properties[2]);

  /// See [ServiceModel.type].
  static final type =
      obx.QueryStringProperty<ServiceModel>(_entities[0].properties[3]);

  /// See [ServiceModel.language].
  static final language =
      obx.QueryStringProperty<ServiceModel>(_entities[0].properties[4]);

  /// See [ServiceModel.emails].
  static final emails =
      obx.QueryStringVectorProperty<ServiceModel>(_entities[0].properties[5]);

  /// See [ServiceModel.mainContact].
  static final mainContact =
      obx.QueryIntegerProperty<ServiceModel>(_entities[0].properties[6]);

  /// See [ServiceModel.iconData].
  static final iconData =
      obx.QueryByteVectorProperty<ServiceModel>(_entities[0].properties[7]);

  /// See [ServiceModel.otherContacts].
  static final otherContacts =
      obx.QueryIntegerVectorProperty<ServiceModel>(_entities[0].properties[8]);
}
